import os
from re import search
import getpass


############
## Config ##
############

host = os.uname()[1]
if search("BI2404M", host) and getpass.getuser()=="argelagr":
    configfile: "config_ricard_local.yaml"
elif search("[headstone|pebble]", host) and getpass.getuser()=="argelagr":
    configfile: "config_ricard_babraham.yaml"
elif search("[headstone|pebble]", host) and getpass.getuser()=="stephen":
    configfile: "config_stephen_babraham.yaml"
else:
    print("Computer not recognised")
    exit()

# validate(config, schema="schemas/config.schema.yaml")

###########
## Rules ##
###########

rule all:
    input:
        # expand(config["directories"]["processed_data"]+"/{sample}.arrow", sample=config["samples"])
        # config["directories"]["processed_data"]+"/Save-ArchR-Project.rds"
        # config["directories"]["processed_data"]+"/sample_metadata_after_archR.txt.gz"
        # config["directories"]["results"]+"/sample_metadata_after_qc.txt.gz"
        # config["directories"]["processed_data"]+"/projectMetadata.rds"
        # config["directories"]["processed_data"]+"/PeakCalls/PeakSet.rds",
        # config["directories"]["processed_data"]+"/PeakCalls/peak_metadata.tsv.gz",
        # config["directories"]["processed_data"]+"/PeakCalls/peaks_archR_macs2.bed.gz",
        # config["directories"]["results"]+"/gene_scores/GeneScoreMatrix_distal.rds",
        # config["directories"]["results"]+"/gene_scores/GeneScoreMatrix_tss.rds"
        # expand(config["directories"]["processed_data"]+"/GroupBigWigs/{group_by}/completed.txt", group_by=config["create_bigwigs"]["group_by"])
        config["directories"]["processed_data"]+"/Annotations/peakAnnotation.rds"
        expand("%s/dimensionality_reduction/umap_features{features}_pcs{npcs}_neigh{n_neighbors}_dist{min_dist}-{colour_by}.pdf" % (config["directories"]["results"]), 
            features = config["dimensionality_reduction"]["features"], 
            npcs = config["dimensionality_reduction"]["npcs"], 
            n_neighbors = config["dimensionality_reduction"]["n_neighbors"], 
            min_dist = config["dimensionality_reduction"]["min_dist"], 
            colour_by = config["dimensionality_reduction"]["colour_by"]
            )

########################
## Create arrow files ##
########################

rule create_arrow_files:
    input:
        script = config["scripts"]["create_arrow_files"],
        # fragments_files = expand(config["directories"]["original_data"]+"/{sample}/atac_fragments.tsv.gz", sample=config["samples"])
        fragments_files = config["directories"]["original_data"]+"/{sample}/atac_fragments.tsv.gz"
    output:
        config["directories"]["processed_data"]+"/{sample}.arrow"
    params:
        outdir = config["directories"]["processed_data"],
        # sample = expand("{sample}", sample=config["samples"]),
        sample = config["samples"],
        genome = config["create_arrow_files"]["genome"],
        min_fragments = config["create_arrow_files"]["min_fragments"],
        max_fragments = config["create_arrow_files"]["max_fragments"],
        min_tss_score = config["create_arrow_files"]["min_tss_score"],
        # threads = config["create_arrow_files"]["threads"],
        memory = config["slurm"]["create_arrow_files"]["memory"]
        # cores = config["slurm"]["create_arrow_files"]["cores"]
    threads: 
        config["slurm"]["create_arrow_files"]["threads"]
    log: 
        "logs/create_arrow_files_{sample}.log"
    shell:
        "Rscript {input.script}  --samples {wildcards.sample} --fragments_files {input.fragments_files} --genome {params.genome} --min_fragments {params.min_fragments} \
        --max_fragments {params.max_fragments} --min_tss_score {params.min_tss_score} --threads {threads} --outdir {params.outdir} > {log}"


##########################
## Create ArchR project ##
##########################

rule create_archr_project:
    input:
        script = config["scripts"]["create_archr_project"],
        # arrow_files = rules.create_arrow_files.output
        arrow_files = expand(config["directories"]["processed_data"]+"/{sample}.arrow", sample=config["samples"])
    output:
        config["directories"]["processed_data"]+"/Save-ArchR-Project.rds"
    params:
        genome = config["create_archr_project"]["genome"],
        outdir = config["directories"]["processed_data"]
        # cores = config["slurm"]["create_archr_project"]["cores"]
    threads: 
        config["slurm"]["create_archr_project"]["threads"]
    log: 
        "logs/create_archr_project.log"
    shell:
        "Rscript {input.script} --arrow_files {input.arrow_files} --genome {params.genome} --outdir {params.outdir} > {log}"


###########################
## Create ArchR metadata ##
###########################

rule create_archr_metadata:
    input:
        script = config["scripts"]["create_archr_metadata"],
        metadata = config["files"]["rna_metadata"]
    output:
        config["directories"]["processed_data"]+"/sample_metadata_after_archR.txt.gz"
    params:
        genome = config["create_archr_metadata"]["genome"],
        # outfile = config["directories"]["processed_data"]+"/sample_metadata_after_archR.txt.gz"
        # cores = config["slurm"]["create_archr_metadata"]["cores"],
        memory = config["slurm"]["create_archr_metadata"]["memory"]
    threads: 
        config["slurm"]["create_archr_metadata"]["threads"]
    log: 
        "logs/create_archr_metadata.log"
    shell:
        "Rscript {input.script} --metadata {input.metadata} --outfile {output} > {log}"


########
## QC ##
########

rule qc_archr:
    input:
        script = config["scripts"]["qc_archr"],
        metadata = rules.create_archr_metadata.output
    output:
        config["directories"]["results"]+"/qc/qc_FragmentSizeDistribution.txt.gz",
        config["directories"]["results"]+"/qc/qc_FragmentSizeDistribution.pdf",
        config["directories"]["results"]+"/qc/qc_TSSenrichment.txt.gz",
        config["directories"]["results"]+"/qc/qc_TSSenrichment.pdf",
        config["directories"]["results"]+"/qc/qc_metrics_histogram.pdf",
        config["directories"]["results"]+"/qc/qc_metrics_barplot.pdf",
        metadata=config["directories"]["results"]+"/qc/sample_metadata_after_qc.txt.gz"
    params:
        min_tss_enrichment = config["qc_archr"]["min_tss_enrichment"],
        min_number_fragments = config["qc_archr"]["min_number_fragments"],
        max_blacklist_ratio = config["qc_archr"]["max_blacklist_ratio"],
        outdir = config["directories"]["results"]+"/qc",
        memory = config["slurm"]["qc_archr"]["memory"]
    threads: 
        config["slurm"]["qc_archr"]["threads"]
    log: 
        "logs/qc_archr.log"
    shell:
        "Rscript {input.script} --metadata {input.metadata} --min_tss_enrichment {params.min_tss_enrichment} --min_number_fragments {params.min_number_fragments} \
        --max_blacklist_ratio {params.max_blacklist_ratio} --threads {threads} --outdir {params.outdir} > {log}"


################
## Pseudobulk ##
################

rule pseudobulk_add_group_coverage:
    input:
        script = config["scripts"]["pseudobulk_add_group_coverage"],
        metadata = rules.qc_archr.output.metadata
    output:
    	config["directories"]["processed_data"]+"/projectMetadata.rds"
    	# /bi/group/reik/ricard/data/DUX4_hESCs_multiome/processed/atac/archR/GroupCoverages/eight_cell_like_ricard
  #   	FALSE._.HNES1_DUX4_overexpression_L001.insertions.coverage.h5
		# FALSE._.HNES1_wildtype_L001.insertions.coverage.h5
		# TRUE._.Rep1.insertions.cover
    params:
    	group_by = config["pseudobulk_add_group_coverage"]["group_by"],
        min_cells = config["pseudobulk_add_group_coverage"]["min_cells"],
        max_cells = config["pseudobulk_add_group_coverage"]["max_cells"],
        memory = config["slurm"]["pseudobulk_add_group_coverage"]["memory"]
    threads: 
        config["slurm"]["pseudobulk_add_group_coverage"]["threads"]
    log: 
        "logs/pseudobulk_add_group_coverage.log"
    shell:
        "Rscript {input.script} --metadata {input.metadata} --group_by {params.group_by} --min_cells {params.min_cells} \
        --max_cells {params.max_cells} --threads {threads} > {log}"


##################
## Peak calling ##
##################

rule peak_calling:
    input:
        script = config["scripts"]["peak_calling"],
        metadata = rules.qc_archr.output.metadata
    output:
        config["directories"]["processed_data"]+"/PeakCalls/PeakSet.rds",
        config["directories"]["processed_data"]+"/PeakCalls/peak_metadata.tsv.gz",
        config["directories"]["processed_data"]+"/PeakCalls/peaks_archR_macs2.bed.gz"
    params:
        group_by = config["peak_calling"]["group_by"],
        pathToMacs2 = config["peak_calling"]["pathToMacs2"],
        pvalue_cutoff = config["peak_calling"]["pvalue_cutoff"],
        extend_summits = config["peak_calling"]["extend_summits"],
        outdir = config["directories"]["processed_data"]+"/PeakCalls",
        memory = config["slurm"]["peak_calling"]["memory"]
    threads:
        config["slurm"]["peak_calling"]["threads"]
    log: 
        "logs/peak_calling.log"
    shell:
        "Rscript {input.script} --metadata {input.metadata} --pathToMacs2 {params.pathToMacs2} --outdir {params.outdir} --group_by {params.group_by} --pvalue_cutoff {params.pvalue_cutoff} \
        --extend_summits {params.extend_summits} --threads {threads} > {log}"

#####################
## Add gene scores ##
#####################

rule add_gene_scores:
    input:
        script = config["scripts"]["gene_scores"],
        metadata = rules.create_archr_metadata.output
    output:
        config["directories"]["results"]+"/gene_scores/GeneScoreMatrix_distal.rds",
        config["directories"]["results"]+"/gene_scores/GeneScoreMatrix_tss.rds"
    params:
        outdir = config["directories"]["results"]+"/gene_scores"
    threads: 
        config["slurm"]["gene_scores"]["threads"]
    log: 
        "logs/gene_scores.log"
    shell:
        "Rscript {input.script}  --metadata {input.metadata} --outdir {params.outdir} --threads {threads} > {log}"

####################
## Create bigwigs ##
####################

# DOES NOT WORK WHEN USING MULTIPEL GROUP_BY VALUES

rule create_bigwigs:
    input:
        script = config["scripts"]["create_bigwigs"],
        metadata = rules.qc_archr.output.metadata
    output:
        config["directories"]["processed_data"]+"/GroupBigWigs/{group_by}/completed.txt",
    params:
        # group_by = config["pseudobulk_add_group_coverage"]["group_by"],
        norm_method = config["create_bigwigs"]["norm_method"],
        tile_size = config["create_bigwigs"]["tile_size"],
        memory = config["slurm"]["create_bigwigs"]["memory"]
    threads: 
        config["slurm"]["create_bigwigs"]["threads"]
    log: 
        "logs/create_bigwigs_{group_by}.log"
    shell:
        "Rscript {input.script}  --metadata {input.metadata} --tile_size {params.tile_size} --norm_method {params.norm_method} --group_by {wildcards.group_by} --threads {threads} > {log}"


##############################
## Dimensionality reduction ##
##############################

rule dimensionality_reduction: 
    input:
        script=config["scripts"]["dimensionality_reduction"],
        sce=config["directories"]["processed_data"]+"/SingleCellExperiment.rds",
        metadata=rules.clustering_seurat.output.metadata
        # metadata=rules.parse_doublet_results.output.metadata
    output:
        # config["directories"]["results"]+"/rna/dimensionality_reduction/umap_nfeatures{dimred_ndims}_ndims{dimred_ndims}_neigh{umap_n_neighbors}_dist{umap_min_dist}-{dimred_colour_by}.pdf"
        # outfile <- sprintf("%s/%s_umap_nfeatures%d_ndims%d_neigh%d_dist%s.txt.gz",args$outdir, paste(args$samples,collapse="-"), args$nfeatures, args$ndims, i, j)
    conda:
        "environment.yaml"
    log: 
        "logs/umap_nfeatures{dimred_nfeatures}_ndims{dimred_ndims}_neigh{umap_n_neighbors}_dist{umap_min_dist}.log"
    params:
        seed = 42,
        # outdir = 
        memory=config["slurm"]["dimensionality_reduction"]["memory"]

    shell:
        "Rscript {input.script} --matrix {wildcards.dimred_matrix} --metadata {input.metadata} --ndims {wildcards.dimred_ndims} --nfeatures {wildcards.dimred_nfeatures} \
            --n_neighbors {wildcards.umap_n_neighbors} --min_dist {wildcards.umap_min_dist} --colour_by {wildcards.dimred_colour_by} \
            -seed {params.seed} --outdir {params.outdir} > {log}"

p <- ArgumentParser(description='')
p$add_argument('--metadata',        type="character",                               help='Cell metadata file')
p$add_argument('--ndims',           type="integer",    default=30,                  help='Number of LSI dimensions')
p$add_argument('--batch.variable',  type="character",                               help='Metadata column to apply batch correction on')
p$add_argument('--batch.method',    type="character",  default="MNN",               help='Batch correctin method ("Harmony" or "MNN")')
p$add_argument('--matrix',          type="character",  default="PeakMatrix",   help='Matrix to use')
p$add_argument('--n_neighbors',     type="integer",    default=30,   nargs='+',     help='(UMAP) Number of neighbours')
p$add_argument('--min_dist',        type="double",     default=0.3,  nargs='+',     help='(UMAP) Minimum distance')
p$add_argument('--colour_by',       type="character",  default="celltype.predicted",  nargs='+',  help='Metadata columns to colour the UMAP by')
p$add_argument('--seed',            type="integer",    default=42,                  help='Random seed')
p$add_argument('--outdir',          type="character",                               help='Output directory')


##################
## Differential ##
##################


##########################
## Add motif annotation ##
##########################

rule add_motif_annotation:
    input:
        script = config["scripts"]["add_motif_annotation"],
        metadata = rules.qc_archr.output.metadata
    output:
        config["directories"]["processed_data"]+"/Annotations/peakAnnotation.rds"
    params:
        memory = config["slurm"]["add_motif_annotation"]["memory"]
    threads: 1
    log: 
        "logs/add_motif_annotation.log"
    shell:
        "Rscript {input.script}  --metadata {input.metadata} --threads {threads} > {log}"


##############################
## Pseudobulk data matrices ##
##############################

